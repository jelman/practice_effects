varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, varName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
}
tail(unadj_df_PEadj)
# Load dataset to be adjusted: No age 20 afqt adjustment, raw score scale
unadj_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_Unadj.csv",
stringsAsFactors = F)
tail(unadj_df)
pracEffects = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj.csv",
row.names=1, stringsAsFactors = F)
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
varName = varNames[1]
varName
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
varName_V2
newVarName_V2
peVal = pracEffects[varName,"PracticeEffect"]
peVal
varName_V2
unadj_df_PEadj[idxV1V2, varName_V2]
peVal
unadj_df_PEadj[idxV1V2, varName_V2] - peVal
unadj_df_PEadj[idxV1V2, newVarName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, varName_V2] - peVal
unadj_df_PEadj[idxV1V2, newVarName_V2]
varName_V2
unadj_df_PEadj[[varName_V2]] = NULL
unadj_df_PEadj[[varName_V2]]
varNames
unadj_df_PEadj[[newVarName_V2]]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, varName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
unadj_df_PEadj[, newVarName_V2]
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, newVarName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
unadj_df_PEadj[, newVarName_V2]
library(dplyr)
###############################################
#     Define variables names and functions    #
###############################################
# Basenames of scores to adjust
varNames = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL5TLOG","CSSACC","MTXRAW","CVA1RAW","CVATOT","CVSDFR","CVLDFR",
"AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN",
"AFQTBXPCTTRAN","DSFRAW","DSBRAW","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR","CSCOR","SRTLMEANLOG",
"SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG","CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG",
"CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT","AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE",
"BXMISSRATE","CPTDPRIME")
# Function to replace negative numbers with zero
zeroFloor = function(x){
x = (x + abs(x)) / 2
x}
# Function to replace times over a given cutoff
timeCeiling = function(x, maxt){
x[x>log(maxt) & !is.na(x)] = log(maxt)
x
}
#-----------------------------------------------------------------#
#   1. Scores on raw score scale, not adjusted for age 20 AFQT    #
#-----------------------------------------------------------------#
# Load dataset to be adjusted: No age 20 afqt adjustment, raw score scale
unadj_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_Unadj.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT but on raw score scale
pracEffects = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, newVarName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
}
# Replace invalid negative numbers with 0
negVars = names(unadj_df_PEadj)[grepl("TRAN", names(unadj_df_PEadj)) | grepl("DPRIME", names(unadj_df_PEadj))]
posVars = names(unadj_df_PEadj)[(!names(unadj_df_PEadj) %in% negVars) & (!sapply(unadj_df_PEadj, is.character))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=posVars, .funs=zeroFloor)
# Replace trails times over limit with the max value allowed
trl240vars = names(unadj_df_PEadj)[grepl("TRL4T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl240vars, .funs=timeCeiling, maxt=240) %>% tail
trl150vars = names(unadj_df_PEadj)[grepl("TRL[1235]T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl150vars, .funs=timeCeiling, maxt=150)
# Save out dataset of scores not adjusted for AFQT, raw score scale, practice effect adjusted
write.csv(unadj_df_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_PE.csv',
row.names=FALSE)
#-----------------------------------------------------------------------#
#   2. Scores on z-score scale that have been adjusted for age 20 AFQT  #
#-----------------------------------------------------------------------#
# Load dataset to be adjusted: Age 20 afqt adjusted, z-score scale
nas201adjzscore_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_Z.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT and z-scored based on VETSA 1
pracEffects_Zscored = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj_Z.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
nas201adjzscore_PEadj = nas201adjzscore_df
idxV1V2 = which(nas201adjzscore_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2_znas")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects_Zscored[varName,"PracticeEffect"]
nas201adjzscore_PEadj[, newVarName_V2] = nas201adjzscore_PEadj[, varName_V2]
nas201adjzscore_PEadj[idxV1V2, newVarName_V2] = nas201adjzscore_PEadj[idxV1V2, newVarName_V2] - peVal
nas201adjzscore_PEadj[[varName_V2]] = NULL
}
# Save out dataset of scores adjusted for AFQT, z-scored to VETSA 1, practice effect adjusted
write.csv(nas201adjzscore_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_Z_PE.csv',
row.names=FALSE)
#--------------------------------------------------------------------------#
#   3. Scores on  raw score scale that have been adjusted for age 20 AFQT  #
#--------------------------------------------------------------------------#
# Load dataset to be adjusted: Age 20 afqt adjusted, raw score scale
nas201adj_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT but on raw score scale
pracEffects = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
nas201adj_PEadj = nas201adj_df
idxV1V2 = which(nas201adj_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2_nas")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
nas201adj_PEadj[, newVarName_V2] = nas201adj_PEadj[, varName_V2]
nas201adj_PEadj[idxV1V2, newVarName_V2] = nas201adj_PEadj[idxV1V2, newVarName_V2] - peVal
nas201adj_PEadj[[varName_V2]] = NULL
}
# Replace invalid negative numbers with 0
negVars = names(nas201adj_PEadj)[grepl("TRAN", names(nas201adj_PEadj)) | grepl("DPRIME", names(nas201adj_PEadj))]
posVars = names(nas201adj_PEadj)[(!names(nas201adj_PEadj) %in% negVars) & (!sapply(nas201adj_PEadj, is.character))]
nas201adj_PEadj = nas201adj_PEadj %>% mutate_at(.cols=posVars, .funs=zeroFloor)
# Replace trails times over limit with the max value allowed
trl240vars = names(nas201adj_PEadj)[grepl("TRL4T", names(nas201adj_PEadj))]
nas201adj_PEadj = nas201adj_PEadj %>% mutate_at(.cols=trl240vars, .funs=timeCeiling, maxt=240)
trl150vars = names(nas201adj_PEadj)[grepl("TRL[1235]T", names(nas201adj_PEadj))]
nas201adj_PEadj = nas201adj_PEadj %>% mutate_at(.cols=trl150vars, .funs=timeCeiling, maxt=150)
# Save out dataset of scores adjusted for AFQT, z-scored to VETSA 1, practice effect adjusted
write.csv(nas201adj_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_PE.csv',
row.names=FALSE)
# Basenames of scores to adjust
varNames = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL5TLOG","CSSACC","MTXRAW","CVA1RAW","CVATOT","CVSDFR","CVLDFR",
"AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN",
"AFQTBXPCTTRAN","DSFRAW","DSBRAW","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR","CSCOR","SRTLMEANLOG",
"SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG","CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG",
"CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT","AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE",
"BXMISSRATE","CPTDPRIME")
# Function to replace negative numbers with zero
zeroFloor = function(x){
x = (x + abs(x)) / 2
x}
# Function to replace times over a given cutoff
timeCeiling = function(x, maxt){
x[x>log(maxt) & !is.na(x)] = log(maxt)
x
}
unadj_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_Unadj.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT but on raw score scale
pracEffects = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, newVarName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
}
# Replace invalid negative numbers with 0
negVars = names(unadj_df_PEadj)[grepl("TRAN", names(unadj_df_PEadj)) | grepl("DPRIME", names(unadj_df_PEadj))]
posVars = names(unadj_df_PEadj)[(!names(unadj_df_PEadj) %in% negVars) & (!sapply(unadj_df_PEadj, is.character))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=posVars, .funs=zeroFloor)
# Replace trails times over limit with the max value allowed
trl240vars = names(unadj_df_PEadj)[grepl("TRL4T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl240vars, .funs=timeCeiling, maxt=240) %>% tail
trl150vars = names(unadj_df_PEadj)[grepl("TRL[1235]T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl150vars, .funs=timeCeiling, maxt=150)
# Save out dataset of scores not adjusted for AFQT, raw score scale, practice effect adjusted
write.csv(unadj_df_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_PE.csv',
row.names=FALSE)
unadj_df_PEadj
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, newVarName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
}
# Replace invalid negative numbers with 0
negVars = names(unadj_df_PEadj)[grepl("TRAN", names(unadj_df_PEadj)) | grepl("DPRIME", names(unadj_df_PEadj))]
posVars = names(unadj_df_PEadj)[(!names(unadj_df_PEadj) %in% negVars) & (!sapply(unadj_df_PEadj, is.character))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=posVars, .funs=zeroFloor)
# Replace trails times over limit with the max value allowed
trl240vars = names(unadj_df_PEadj)[grepl("TRL4T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl240vars, .funs=timeCeiling, maxt=240)
trl150vars = names(unadj_df_PEadj)[grepl("TRL[1235]T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl150vars, .funs=timeCeiling, maxt=150)
# Save out dataset of scores not adjusted for AFQT, raw score scale, practice effect adjusted
write.csv(unadj_df_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_PE.csv',
row.names=FALSE)
# Import libraries
library(dplyr)
# Load raw test scores and demographics data
allData = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/raw/V1V2_CogData_Raw.csv",
stringsAsFactors = FALSE)
# Convert all variable names to upper case
names(allData) = toupper(names(allData))
### Log transform timing data ###
# Get names of variables to transform
timeVarsV1 = c("TRL1T","TRL2T","TRL3T","TRL4T","TRL5T","SRTLMEAN","SRTLSTD","SRTRMEAN",
"SRTRSTD","SRTGMEAN","SRTGSTD","CHRTLMEAN","CHRTRMEAN","CHRTLSTD",
"CHRTRSTD","CHRTGMEAN","CHRTGSTD")
timeVarsLogV1 = paste0(timeVarsV1, "LOG")
timeVarsV2 = paste0(timeVarsV1, "_V2")
timeVarsLogV2 = paste0(timeVarsLogV1, "_V2")
# Transform
allData[timeVarsLogV1] = log(allData[timeVarsV1])
allData = dplyr::select(allData, -one_of(timeVarsV1))
allData[timeVarsLogV2] = log(allData[timeVarsV2])
allData = dplyr::select(allData, -one_of(timeVarsV2))
### Save out unadjusted scores on raw score scale ###
write.csv(allData,
"~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_Unadj.csv",
row.names = FALSE)
# Create list of raw variable names to adjust
rawVarsV1 = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL5TLOG","CSSACC","MTXRAW","CVA1RAW","CVATOT","CVSDFR","CVLDFR",
"AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN",
"AFQTBXPCTTRAN","DSFRAW","DSBRAW","DSFMAX","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR","CSCOR","SRTLMEANLOG",
"SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG","CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG",
"CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT","AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE",
"BXMISSRATE","CPTDPRIME")
rawVarsV2 = paste0(rawVarsV1, "_V2")
# Print variable names and verify these are correct
rawVarsV1
rawVarsV2
#----------------------------------------------------------------------------#
#                     Define functions                                       #
#----------------------------------------------------------------------------#
adjustDataset = function(regVars,adjVars,nDemoVars=7,data){
#######################################################################
# Adjust dataset for specified set of variables.Regresses passed      #
# variables from each measure using linear regression. The intercept  #
# is added back in to retain mean level information.                  #
# Input:                                                              #
# regVars = List of variables to regress out                          #
# adjVars = List of variables to be adjusted                          #
# nDemoVars = Number of demographic variables included in dataframe.  #
#             These should be the first 1:nDemoVars columns of        #
#             the dataframe                                           #
#######################################################################
# Read variable names from data and store in a vector
allNames <- names(data)
#*** Check variables are correct
nVars <- length(adjVars)
### Creating Storate Data Frame ###
# Set number of individuals
n <- dim(data)[1]
tot <- dim(data)[2]
# Create Data Frame
data <- cbind(data,matrix(NA,nrow=n,ncol=nVars))
names(data) <- c(allNames,paste(adjVars,"_nas",sep=""))
### Running Loop Using lapply ###
# fitting models
models <- lapply(adjVars, function(x) {
fmla = as.formula(paste0(x," ~ ",regVars))
lm(formula=fmla, data = data, na.action=na.exclude)
})
# storing residuals from each model into data frame
for(v in 1:nVars){
data[,tot+v] <- residuals(models[[v]]) + coef(models[[v]])[[1]]
}
#dataR is now your residualized parameters
dataR <- data[,c(1:nDemoVars,(tot+1):(tot+nVars))]
dataR
}
addScaleVals = function(df,varname, x) {
###########################################################
# Save mean and SD of all variables into a dataframe      #
# Input:                                                  #
# df = Initialized dataframe to hold results              #
# varname = String name of variable                       #
# x = Scaled vector of data                               #
###########################################################
meanVal = attr(x, which="scaled:center")
sdVal = attr(x, which="scaled:scale")
rbind(df, data.frame(Variable=varname, Mean=meanVal, SD=sdVal))
}
########################################
### Begin creating adjusted datasets ###
########################################
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for nas201tran (Age 20 AFQT)                              #
#                                                                                   #
# Adjustment consists of regressing out nuisance variable from raw variables.       #
# Intercept is added back in to avoid mean centering.                               #
#-----------------------------------------------------------------------------------#
# Adjust raw scores from VETSA 1 and VETSA 2
adjVars = c(rawVarsV1, rawVarsV2)
### Set number of demographic variables included in dataframe (these won't be adjusted) ###
nDemoVars = 7
# Filter out subjects missing variable to be regressed out
data = subset(allData, !is.na(allData$NAS201TRAN))
# Specify nas201tran (Age 20 AFQT as variable to regress out)
regVars = paste("scale(NAS201TRAN)", sep=" + ")
# Regress nas201tran out of dataset
nasAdjRawScoresData = adjustDataset(regVars, adjVars, nDemoVars, data)
# Save out dataset with Age 20 AFQT regressed out
write.csv(nasAdjRawScoresData, "~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj.csv",
row.names=F)
#-----------------------------------------------------------------------------------#
# Create dataset adjusted for nas201tran (Age 20 AFQT) and standardized.            #
#                                                                                   #
# Dataset with NAS201TRAN (age 20 AFQT) regressed out is standardized (z-scored)    #
# based on V ETSA 2 means and sd.                                                   #
#-----------------------------------------------------------------------------------#
# Initialize dataframe to hold means and SDs
scaleValues = data.frame()
nasAdjZscoresData = nasAdjRawScoresData
# Scale VETSA 1 variables that have been adjusted for nas201tran
# Adds mean and SD to dataframe and deletes adjusted raw variables from dataset
for(i in rawVarsV1){
varname = paste0(i, "_nas")
zvarname = gsub("_nas","_znas",varname)
nasAdjZscoresData[[zvarname]] = scale(nasAdjZscoresData[[varname]])
scaleValues = addScaleVals(scaleValues, varname, nasAdjZscoresData[[zvarname]])
nasAdjZscoresData[[varname]] = NULL
}
# Scale VETSA 2 variables that have been adjusted for nas201tran using VETSA 1 mean and SD
# Delete adjusted raw variable from dataset
for(i in rawVarsV2){
varnameV2 = paste0(i, "_nas")
zvarname = gsub("_nas","_znas",varnameV2)
varnameV1 = gsub("_V2","",varnameV2)
nasAdjZscoresData[[zvarname]] = scale(nasAdjZscoresData[[varnameV2]],
center=scaleValues$Mean[scaleValues$Variable==varnameV1],
scale=scaleValues$SD[scaleValues$Variable==varnameV1])
nasAdjZscoresData[[varnameV2]] = NULL
}
# Save out adjusted and z-scored dataset
write.csv(nasAdjZscoresData,
"~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_Z.csv",
row.names = FALSE)
# Save out means and standard deviations used to standardize scores
write.csv(scaleValues, "~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1_NASAdj_Means_SDs.csv",
row.names = FALSE)
#######################################################################################
# This script adjusts cognitive test scores for practice effects. Three datasets are  #
# adjusted:                                                                           #
#                                                                                     #
# 1.) Scores that have been *not* been adjusted for age 20 AFQT and remain on the     #
#     raw test score scale. These are adjusted by practice effects calculated from    #
#     scores that *have* been adjusted for AFQT, but remain on raw score scale.       #
#     Can be used when age 20 AFQT is a predictor of interest.                        #
#                                                                                     #
# 2.) Scores that have been adjusted for age 20 AFQT and z-scored based on VETSA1     #
#     means and standard deviations. These are adjusted by practice effects           #
#     calculated from scores that have been adjusted for AFQT and z-scored based      #
#     on VETSA1 means and standard deviations. These should not be used if age 20     #
#     is a predictor of interest.                                                     #
# 3.) Scores that have been adjusted for age 20 AFQT but remain on the raw score      #
#     scale. These are adjusted by practice effects calculated from scores that       #
#     *have* been adjusted for AFQT, but remain on raw score scale. These should not  #
#     be used if age 20 is a predictor of interest.                                   #
#                                                                                     #
# Note: Only time 2 scores of longitudinal (V1V2) subjects are adjusted               #
#                                                                                     #
#######################################################################################
library(dplyr)
###############################################
#     Define variables names and functions    #
###############################################
# Basenames of scores to adjust
varNames = c("MR1COR","TRL1TLOG","TRL2TLOG","TRL3TLOG","TRL4TLOG","TRL5TLOG","CSSACC","MTXRAW","CVA1RAW","CVATOT","CVSDFR","CVLDFR",
"AFQTPCT","AFQTVOCPCT","AFQTARPCT","AFQTTLPCT","AFQTBXPCT","AFQTPCTTRAN","AFQTVOCPCTTRAN","AFQTARPCTTRAN","AFQTTLPCTTRAN",
"AFQTBXPCTTRAN","DSFRAW","DSBRAW","DSFMAX","SSPFRAW","SSPBRAW","LNTOT","LMITOT","LMDTOT","VRITOT","VRDTOT","VRCTOT","HFTOTCOR",
"STRWRAW","STRCRAW","STRCWRAW","LFFCOR","LFACOR","LFSCOR","LFCOR","CFANCOR","CFBNCOR","CFCOR","CSCOR","SRTLMEANLOG",
"SRTLSTDLOG","SRTRMEANLOG","SRTRSTDLOG","SRTGMEANLOG","SRTGSTDLOG","CHRTLMEANLOG","CHRTRMEANLOG","CHRTLSTDLOG",
"CHRTRSTDLOG","CHRTGMEANLOG","CHRTGSTDLOG","RSATOT","AXHITRATE","AXFARATE","AXMISSRATE","BXHITRATE","BXFARATE",
"BXMISSRATE","CPTDPRIME")
# Function to replace negative numbers with zero
zeroFloor = function(x){
x = (x + abs(x)) / 2
x}
# Function to replace times over a given cutoff
timeCeiling = function(x, maxt){
x[x>log(maxt) & !is.na(x)] = log(maxt)
x
}
#-----------------------------------------------------------------#
#   1. Scores on raw score scale, not adjusted for age 20 AFQT    #
#-----------------------------------------------------------------#
# Load dataset to be adjusted: No age 20 afqt adjustment, raw score scale
unadj_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_Unadj.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT but on raw score scale
pracEffects = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
unadj_df_PEadj = unadj_df
idxV1V2 = which(unadj_df_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
unadj_df_PEadj[, newVarName_V2] = unadj_df_PEadj[, varName_V2]
unadj_df_PEadj[idxV1V2, newVarName_V2] = unadj_df_PEadj[idxV1V2, newVarName_V2] - peVal
unadj_df_PEadj[[varName_V2]] = NULL
}
# Replace invalid negative numbers with 0
negVars = names(unadj_df_PEadj)[grepl("TRAN", names(unadj_df_PEadj)) | grepl("DPRIME", names(unadj_df_PEadj))]
posVars = names(unadj_df_PEadj)[(!names(unadj_df_PEadj) %in% negVars) & (!sapply(unadj_df_PEadj, is.character))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=posVars, .funs=zeroFloor)
# Replace trails times over limit with the max value allowed
trl240vars = names(unadj_df_PEadj)[grepl("TRL4T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl240vars, .funs=timeCeiling, maxt=240)
trl150vars = names(unadj_df_PEadj)[grepl("TRL[1235]T", names(unadj_df_PEadj))]
unadj_df_PEadj = unadj_df_PEadj %>% mutate_at(.cols=trl150vars, .funs=timeCeiling, maxt=150)
# Save out dataset of scores not adjusted for AFQT, raw score scale, practice effect adjusted
write.csv(unadj_df_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_PE.csv',
row.names=FALSE)
#-----------------------------------------------------------------------#
#   2. Scores on z-score scale that have been adjusted for age 20 AFQT  #
#-----------------------------------------------------------------------#
# Load dataset to be adjusted: Age 20 afqt adjusted, z-score scale
nas201adjzscore_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_Z.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT and z-scored based on VETSA 1
pracEffects_Zscored = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj_Z.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
nas201adjzscore_PEadj = nas201adjzscore_df
idxV1V2 = which(nas201adjzscore_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2_znas")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects_Zscored[varName,"PracticeEffect"]
nas201adjzscore_PEadj[, newVarName_V2] = nas201adjzscore_PEadj[, varName_V2]
nas201adjzscore_PEadj[idxV1V2, newVarName_V2] = nas201adjzscore_PEadj[idxV1V2, newVarName_V2] - peVal
nas201adjzscore_PEadj[[varName_V2]] = NULL
}
# Save out dataset of scores adjusted for AFQT, z-scored to VETSA 1, practice effect adjusted
write.csv(nas201adjzscore_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_Z_PE.csv',
row.names=FALSE)
#--------------------------------------------------------------------------#
#   3. Scores on  raw score scale that have been adjusted for age 20 AFQT  #
#--------------------------------------------------------------------------#
# Load dataset to be adjusted: Age 20 afqt adjusted, raw score scale
nas201adj_df = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj.csv",
stringsAsFactors = F)
# Load practice effect values calculated based scores adjusted for AFQT but on raw score scale
pracEffects = read.csv("~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/results/PracEffectValues_NASAdj.csv",
row.names=1, stringsAsFactors = F)
## Apply practice effect adjustments ##
nas201adj_PEadj = nas201adj_df
idxV1V2 = which(nas201adj_PEadj$VETSAGRP=="V1V2")
for (varName in varNames) {
varName_V2 = paste0(varName, "_V2_nas")
newVarName_V2 = paste0(varName_V2,"p")
peVal = pracEffects[varName,"PracticeEffect"]
nas201adj_PEadj[, newVarName_V2] = nas201adj_PEadj[, varName_V2]
nas201adj_PEadj[idxV1V2, newVarName_V2] = nas201adj_PEadj[idxV1V2, newVarName_V2] - peVal
nas201adj_PEadj[[varName_V2]] = NULL
}
# Replace invalid negative numbers with 0
negVars = names(nas201adj_PEadj)[grepl("TRAN", names(nas201adj_PEadj)) | grepl("DPRIME", names(nas201adj_PEadj))]
posVars = names(nas201adj_PEadj)[(!names(nas201adj_PEadj) %in% negVars) & (!sapply(nas201adj_PEadj, is.character))]
nas201adj_PEadj = nas201adj_PEadj %>% mutate_at(.cols=posVars, .funs=zeroFloor)
# Replace trails times over limit with the max value allowed
trl240vars = names(nas201adj_PEadj)[grepl("TRL4T", names(nas201adj_PEadj))]
nas201adj_PEadj = nas201adj_PEadj %>% mutate_at(.cols=trl240vars, .funs=timeCeiling, maxt=240)
trl150vars = names(nas201adj_PEadj)[grepl("TRL[1235]T", names(nas201adj_PEadj))]
nas201adj_PEadj = nas201adj_PEadj %>% mutate_at(.cols=trl150vars, .funs=timeCeiling, maxt=150)
# Save out dataset of scores adjusted for AFQT, z-scored to VETSA 1, practice effect adjusted
write.csv(nas201adj_PEadj, '~/netshare/M/PSYCH/KREMEN/Practice Effect Cognition/data/V1V2_CogData_NASAdj_PE.csv',
row.names=FALSE)
